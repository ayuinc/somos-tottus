"use strict";var ApplicationConfiguration=function(){var applicationModuleName="somos-tottus",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("benefits",["angularFileUpload"]),ApplicationConfiguration.registerModule("comments"),ApplicationConfiguration.registerModule("core",["angularMoment"]),ApplicationConfiguration.registerModule("events",["angularFileUpload"]),ApplicationConfiguration.registerModule("likes"),ApplicationConfiguration.registerModule("notifications"),ApplicationConfiguration.registerModule("posts",["angularFileUpload","angularMoment"]),ApplicationConfiguration.registerModule("stores"),ApplicationConfiguration.registerModule("users",["ui.bootstrap","ui.router"]),ApplicationConfiguration.registerModule("vacancies",["angularFileUpload"]),angular.module("benefits").config(["$stateProvider",function($stateProvider){$stateProvider.state("listBenefits",{url:"/benefits",templateUrl:"modules/benefits/views/list-benefits.client.view.html",controller:"BenefitsController"}).state("newBenefit",{url:"/benefits/new",templateUrl:"modules/benefits/views/new-benefit.client.view.html",controller:"BenefitsController"}).state("showBenefit",{url:"/benefits/:benefitId",templateUrl:"modules/benefits/views/show-benefit.client.view.html",controller:"BenefitsController"})}]),angular.module("benefits").controller("BenefitsController",["$scope","$stateParams","$location","$http","Authentication","Posts","Benefits","AWS","FileUploader","Notifications",function($scope,$stateParams,$location,$http,Authentication,Posts,Benefits,AWS,FileUploader,Notifications){$scope.authentication=Authentication,$scope.detailLetterLimit=110,$scope.authentication.user||$location.path("/"),$scope.uploader=new FileUploader({url:"https://s3.amazonaws.com/tottus/",method:"POST",queueLimit:1}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}});var registerNotification=function(post,nextUrl){if(!~$scope.authentication.user.roles.indexOf("admin"))return!1;var newNot=new Notifications({post:post,nextUrl:nextUrl});newNot.$save(function(){console.log("success!")},function(){console.log("error!")})};$scope.getCredentials=function(){AWS.getCredentials().then(function(res){$scope.credentials=res.data})},$scope.new=function(){if($scope.benefit&&$scope.post){var endDateArr=$scope.benefit.end.split("-");3===endDateArr.length?$scope.benefit.end=new Date(endDateArr[0],endDateArr[1]-1,endDateArr[2],23,59):$scope.error="Ingrese una fecha completa";var newBenefit=new Benefits({benefit:{location:this.benefit.benefitLocation,subtitle:this.benefit.subtitle,category:this.benefit.category,end:this.benefit.end},post:{name:this.post.name,detail:this.post.detail,imgFilePath:"assets/img/posts-placeholder.png"}});if($scope.uploader.queue[0]){var uploadItem=$scope.uploader.queue[0];newBenefit.$save(function(response){uploadItem.formData=[{key:"post_"+response.post+"."+uploadItem.file.name.split(".").pop(),AWSAccessKeyId:$scope.credentials.access_key,acl:"private",policy:$scope.credentials.policy,signature:$scope.credentials.signature,"Content-Type":"application/octet-stream",filename:"post_"+response.post+"."+uploadItem.file.name.split(".").pop()}],uploadItem.onSuccess=function(){$scope.detail="",$location.path("benefits/"+response._id)},uploadItem.upload();var nextUrl="benefits/"+response._id;registerNotification(response.post,nextUrl);var post=Posts.get({postId:response.post},function(){post.imgFilePath="https://s3.amazonaws.com/tottus/post_"+response.post+"."+uploadItem.file.name.split(".").pop(),post.$update()})},function(errorResponse){$scope.error=errorResponse.data.message})}else newBenefit.$save(function(response){var nextUrl="benefits/"+response._id;registerNotification(response.post,nextUrl),$location.path("benefits/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})}else $scope.error="Completa los campos requeridos."},$scope.find=function(){$scope.benefits=Benefits.query()},$scope.findOne=function(){$scope.benefit=Benefits.get({benefitId:$stateParams.benefitId}),$scope.benefit.$promise.then(function(benefit){benefit.post=Posts.get({postId:benefit.post}),benefit.post.$promise.then(function(post){post.ngLike=!1;for(var i=post.likes.length-1;i>=0;i--)if(post.likes[i].user===$scope.authentication.user._id)return void(post.ngLike=!0)})})},$scope.remove=function(benefit){if(benefit){benefit.$remove();for(var i in $scope.benefits)$scope.benefits[i]===benefit&&$scope.benefits.splice(i,1)}else $scope.benefit.$remove(function(){$location.path("benefits")})},$scope.canRemove=function(){return!!~$scope.authentication.user.roles.indexOf("admin")}}]),angular.module("benefits").filter("benefitImageFilter",function(){return function(input){return"assets/img/posts-placeholder.png"!==input?!0:!1}}),angular.module("benefits").factory("Benefits",["$resource",function($resource){return $resource("benefits/:benefitId",{benefitId:"@_id"},{update:{method:"PUT"}})}]),angular.module("comments").config(["$stateProvider",function($stateProvider){$stateProvider.state("listComments",{url:"/posts/:postId/comments",templateUrl:"modules/comments/views/list-comments.client.view.html"}).state("newComment",{url:"/posts/:postId/comments/new",templateUrl:"modules/comments/views/new-comment.client.view.html"})}]),angular.module("comments").controller("CommentsController",["$scope","$stateParams","$window","Authentication","Posts","Comments",function($scope,$stateParams,$window,Authentication,Posts,Comments){$scope.authentication=Authentication,$scope.text="",$scope.getPost=function(){$scope.post=Posts.get({postId:$stateParams.postId})},$scope.addComment=function(){var comment=new Comments({text:$scope.text,postId:$stateParams.postId});comment.$save(function(){$window.history.back()},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("comments").factory("Comments",["$resource",function($resource){return $resource("posts/:postId/comments/:commentId",{commentId:"@_id",postId:"@postId"})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/posts/views/list-posts.client.view.html"}).state("navigationDrawer",{url:"/menu",templateUrl:"modules/core/views/nav-drawer.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$location","Authentication","Posts",function($scope,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.user=$scope.authentication.user}]),angular.module("core").controller("LayoutController",["$scope","$location","Authentication","Layout","$anchorScroll","NotificationsExtra",function($scope,$location,Authentication,Layout,$anchorScroll,NotificationsExtra){function scrollToTop(){$anchorScroll()}$scope.authentication=Authentication;var isAuthPath={signin:!0,signup:!0,"first-change-password":!0,firstsignin:!0},isCreatePath={newPost:!0,newComment:!0};$scope.$on("$stateChangeStart",function(toState,toParams){var state=toParams.name,isAuth=isAuthPath[state],isCreate=isCreatePath[state];$scope.isAuth=isAuth,$scope.isCreatePath=isCreate,NotificationsExtra.countUnRead().then(function(data){$scope.unreadNotifications=data.unread});var stateObj=Layout.getPageContent({state:state});if(stateObj){var navViewActionBar=stateObj.navViewActionBar,navViewIndicator=stateObj.navViewIndicator,navSubnavTabs=stateObj.navSubnavTabs;$scope.hasNavViewActionBar=navViewActionBar.hasThis,navViewActionBar.hasThis&&($scope.shouldRender=navViewActionBar.shouldRender?navViewActionBar.shouldRender($scope.authentication.user)&&navViewActionBar.actionButtonText:navViewActionBar.actionButtonText,$scope.actionButtonText=navViewActionBar.actionButtonText,$scope.actionButtonAction=navViewActionBar.actionButtonAction,$scope.previousPage=navViewActionBar.previousPage&&"#!"+navViewActionBar.previousPage),$scope.hasNavViewIndicator=navViewIndicator.hasThis,navViewIndicator.hasThis&&($scope.indicatorText=navViewIndicator.indicatorText),$scope.hasNavSubnavTabs=navSubnavTabs.hasThis,$scope.isRoute=function($state){return state===$state?navSubnavTabs.isActive:void 0}}}),$scope.$on("$stateChangeSuccess",scrollToTop)}]),angular.module("core").directive("ngEnter",function(){return function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.$eval(attrs.ngEnter)}),event.preventDefault())})}}),angular.module("core").service("Layout",[function(){var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1},pageContentHash={listPosts:{navViewActionBar:{hasThis:!0,actionButtonText:"Publicar",actionButtonAction:"/#!/posts/new",isURL:!0,shouldRender:shouldRender,roles:["*"]},navViewIndicator:{hasThis:!0,indicatorText:"Muro"},navSubnavTabs:{hasThis:!0,isActive:!0}},newPost:{navViewActionBar:{hasThis:!0,actionButtonAction:"",isURL:!0,previousPage:"/posts"},navViewIndicator:{hasThis:!0,indicatorText:"Nueva publicación"},navSubnavTabs:{hasThis:!1}},showPost:{navViewActionBar:{hasThis:!0,isURL:!0,previousPage:"/posts"},navViewIndicator:{hasThis:!0,indicatorText:"Publicación"},navSubnavTabs:{hasThis:!0}},listComments:{},newComment:{navViewActionBar:{hasThis:!0,previousPage:"/posts",isURL:!0},navViewIndicator:{hasThis:!0,indicatorText:"Escribe un comentario"},navSubnavTabs:{hasThis:!1}},"public-profile":{navViewActionBar:{hasThis:!0,isURL:!0},navViewIndicator:{hasThis:!0,indicatorText:"Perfil"},navSubnavTabs:{hasThis:!0}},profile:{navViewActionBar:{hasThis:!0,isURL:!0},navViewIndicator:{hasThis:!0,indicatorText:"Mi perfil"},navSubnavTabs:{hasThis:!0}},password:{},"first-change-password":{navViewActionBar:{hasThis:!1},navViewIndicator:{hasThis:!1},navSubnavTabs:{hasThis:!1}},"first-update-profile":{navViewActionBar:{hasThis:!0},navViewIndicator:{hasThis:!0,indicatorText:"Confirma tus datos"},navSubnavTabs:{hasThis:!1}},accounts:{},signup:{navViewActionBar:{hasThis:!1},navViewIndicator:{hasThis:!1},navSubnavTabs:{hasThis:!1}},signin:{navViewActionBar:{hasThis:!1},navViewIndicator:{hasThis:!1},navSubnavTabs:{hasThis:!1}},firstsignin:{navViewActionBar:{hasThis:!1},navViewIndicator:{hasThis:!1},navSubnavTabs:{hasThis:!1}},forgot:{},"reset-invalid":{},"reset-success":{},reset:{},"edit-field":{navViewActionBar:{hasThis:!0,isURL:!0,previousPage:"/settings/profile"},navViewIndicator:{hasThis:!0,indicatorText:"Editar información"},navSubnavTabs:{hasThis:!1}},navigationDrawer:{navViewActionBar:{hasThis:!0,isURL:!0},navViewIndicator:{hasThis:!0,indicatorText:"Menú"},navSubnavTabs:{hasThis:!0,isActive:!0}},listBenefits:{navViewActionBar:{hasThis:!0,actionButtonText:"Publicar beneficio",actionButtonAction:"/#!/benefits/new",isURL:!0,shouldRender:shouldRender,roles:["admin"]},navViewIndicator:{hasThis:!0,indicatorText:"Beneficios"},navSubnavTabs:{hasThis:!0}},newBenefit:{navViewActionBar:{hasThis:!0,actionButtonAction:"",isURL:!0,previousPage:"/benefits"},navViewIndicator:{hasThis:!0,indicatorText:"Nuevo beneficio"},navSubnavTabs:{hasThis:!1}},showBenefit:{navViewActionBar:{hasThis:!0,isURL:!0,previousPage:"/benefits"},navViewIndicator:{hasThis:!0,indicatorText:"Beneficio"},navSubnavTabs:{hasThis:!0}},listEvents:{navViewActionBar:{hasThis:!0,actionButtonText:"Publicar evento",actionButtonAction:"/#!/events/new",isURL:!0,shouldRender:shouldRender,roles:["admin"]},navViewIndicator:{hasThis:!0,indicatorText:"Eventos"},navSubnavTabs:{hasThis:!0}},createEvent:{navViewActionBar:{hasThis:!0,actionButtonAction:"",isURL:!0,previousPage:"/events"},navViewIndicator:{hasThis:!0,indicatorText:"Nuevo evento"},navSubnavTabs:{hasThis:!1}},viewEvent:{navViewActionBar:{hasThis:!0,isURL:!0,previousPage:"/events"},navViewIndicator:{hasThis:!0,indicatorText:"Evento"},navSubnavTabs:{hasThis:!0}},listAttendees:{navViewActionBar:{hasThis:!0,isURL:!0,previousPage:"/events"},navViewIndicator:{hasThis:!0,indicatorText:"Asistentes"},navSubnavTabs:{hasThis:!0}},listVacancies:{navViewActionBar:{hasThis:!0,actionButtonText:"Publicar oportunidad",actionButtonAction:"/#!/vacancies/new",isURL:!0},navViewIndicator:{hasThis:!0,indicatorText:"Oportunidades de cambio interno"},navSubnavTabs:{hasThis:!0}},newVacancy:{navViewActionBar:{hasThis:!0,actionButtonAction:"",isURL:!0,previousPage:"/vacancies"},navViewIndicator:{hasThis:!0,indicatorText:"Nueva oportunidad"},navSubnavTabs:{hasThis:!1}},showVacancy:{navViewActionBar:{hasThis:!0,isURL:!0,previousPage:"/vacancies"},navViewIndicator:{hasThis:!0,indicatorText:"Oportunidad de cambio interno"},navSubnavTabs:{hasThis:!0}},listBirthdays:{navViewActionBar:{hasThis:!0,isURL:!0},navViewIndicator:{hasThis:!0,indicatorText:"Cumpleaños"},navSubnavTabs:{hasThis:!0}},showBirthday:{navViewActionBar:{hasThis:!0,isURL:!0,previousPage:"/birthdays"},navViewIndicator:{hasThis:!0,indicatorText:"Cumpleaños"},navSubnavTabs:{hasThis:!0}},listNotifications:{navViewActionBar:{hasThis:!0,isURL:!0},navViewIndicator:{hasThis:!0,indicatorText:"Notificaciones"},navSubnavTabs:{hasThis:!0,isActive:!0}}};this.getPageContent=function(stateObj){var pageContent={},state=stateObj.state;return pageContent=pageContentHash[state]}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("events").config(["$stateProvider",function($stateProvider){$stateProvider.state("listEvents",{url:"/events",templateUrl:"modules/events/views/list-events.client.view.html"}).state("createEvent",{url:"/events/new",templateUrl:"modules/events/views/new-event.client.view.html"}).state("viewEvent",{url:"/events/:eventId",templateUrl:"modules/events/views/show-event.client.view.html"}).state("listAttendees",{url:"/events/:eventId/attendees",templateUrl:"modules/events/views/list-attendees.client.view.html"})}]),angular.module("events").controller("EventsController",["$scope","$stateParams","$location","$http","Authentication","Posts","Events","AWS","FileUploader","Attendees","Notifications",function($scope,$stateParams,$location,$http,Authentication,Posts,Events,AWS,FileUploader,Attendees,Notifications){$scope.authentication=Authentication,$scope.detailLetterLimit=170,$scope.authentication.user||$location.path("/"),$scope.uploader=new FileUploader({url:"https://s3.amazonaws.com/tottus/",method:"POST",queueLimit:1}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}});var registerNotification=function(post,nextUrl){if(!~$scope.authentication.user.roles.indexOf("admin"))return!1;var newNot=new Notifications({post:post,nextUrl:nextUrl});newNot.$save(function(){console.log("success!")},function(){console.log("error!")})};$scope.getCredentials=function(){AWS.getCredentials().then(function(res){$scope.credentials=res.data})},$scope.new=function(){if($scope.evt&&$scope.post){var startDateArr=$scope.evt.startDate.split("-"),startTimeArr=$scope.evt.startTime.split(":"),endDateArr=$scope.evt.endDate.split("-"),endTimeArr=$scope.evt.endTime.split(":");if(3===startDateArr.length&&2===startTimeArr.length&&3===endDateArr.length&&2===endTimeArr.length){var startDate=new Date(startDateArr[0],startDateArr[1]-1,startDateArr[2],startTimeArr[0],startTimeArr[1]),endDate=new Date(endDateArr[0],endDateArr[1]-1,endDateArr[2],endTimeArr[0],endTimeArr[1]),newEvent=new Events({evt:{location:this.evt.eventLocation,start:startDate,end:endDate},post:{name:this.post.name,detail:this.post.detail,imgFilePath:"assets/img/img-placeholder.png"}});if($scope.uploader.queue[0]){var uploadItem=$scope.uploader.queue[0];newEvent.$save(function(response){uploadItem.formData=[{key:"post_"+response.post+"."+uploadItem.file.name.split(".").pop(),AWSAccessKeyId:$scope.credentials.access_key,acl:"private",policy:$scope.credentials.policy,signature:$scope.credentials.signature,"Content-Type":"application/octet-stream",filename:"post_"+response.post+"."+uploadItem.file.name.split(".").pop()}],uploadItem.onSuccess=function(){$scope.detail="",$location.path("events/"+response._id)},uploadItem.upload();var nextUrl="events/"+response._id;registerNotification(response.post,nextUrl);var post=Posts.get({postId:response.post},function(){post.imgFilePath="https://s3.amazonaws.com/tottus/post_"+response.post+"."+uploadItem.file.name.split(".").pop(),post.$update()})},function(errorResponse){$scope.error=errorResponse.data.message})}else newEvent.$save(function(response){var nextUrl="events/"+response._id;registerNotification(response.post,nextUrl),$location.path("events/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})}else $scope.error="Completa los campos requeridos."}else $scope.error="Completa los campos requeridos."},$scope.find=function(){$scope.events=Events.query(),$scope.events.$promise.then(function(){})},$scope.findOne=function(){$scope.evt=Events.get({eventId:$stateParams.eventId}),$scope.evt.$promise.then(function(evt){evt.attended=!1,evt.post=Posts.get({postId:evt.post});for(var i=evt.attendees.length-1;i>=0;i--)if(evt.attendees[i]===$scope.authentication.user._id)return void(evt.attended=!0)})},$scope.getAttendees=function(){Attendees.getAttendees($stateParams.eventId).then(function(res){$scope.evtAttendees=res})},$scope.registerAttendee=function(){$scope.evt.attended=!0,$scope.evt.attendees.push($scope.authentication.user._id),Attendees.registerAttendee($scope.evt._id).then()},$scope.remove=function(evt){if(evt){evt.$remove();for(var i in $scope.events)$scope.events[i]===evt&&$scope.events.splice(i,1)}else $scope.evt.$remove(function(){$location.path("events")})},$scope.canRemove=function(){return!!~$scope.authentication.user.roles.indexOf("admin")}}]),angular.module("events").directive("attended",[function(){return{restrict:"A",link:function(){}}}]),angular.module("events").filter("eventImageFilter",function(){return function(input){return"assets/img/img-placeholder.png"!==input?!0:!1}}),angular.module("events").factory("Attendees",["$http",function($http){var Attendees={};return Attendees.registerAttendee=function(eventId){return $http.post("/events/"+eventId+"/registerAttendee").then(function(res){return res.data})},Attendees.getAttendees=function(eventId){return $http.get("/events/"+eventId+"/attendees").then(function(res){return res.data})},Attendees}]),angular.module("events").factory("Events",["$resource",function($resource){return $resource("events/:eventId",{eventId:"@_id"},{update:{method:"PUT"}})}]),angular.module("likes").config(["$stateProvider",function($stateProvider){$stateProvider.state("like",{url:"/posts/:postId/like",templateUrl:"modules/likes/views/like.client.view.html"}).state("dislike",{url:"/posts/:postId/dislike",templateUrl:"modules/likes/views/dislike.client.view.html"})}]),angular.module("likes").controller("LikesController",["$scope","$stateParams","$location","Authentication","Posts","Likes",function($scope,$stateParams,$location,Authentication,Posts,Likes){$scope.authentication=Authentication,$scope.new=function(){var like=new Likes({post:$scope.post});like.$save(function(){},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("likes").factory("Likes",["$http",function($http){var Likes=function(data){angular.extend(this,data)};return Likes.prototype.create=function(postId){var like=this;return $http.post("/posts/"+postId+"/likes",like).then(function(res){return like._id=res.data._id,like})},Likes}]),angular.module("notifications").config(["$stateProvider",function($stateProvider){$stateProvider.state("listNotifications",{url:"/notifications",templateUrl:"modules/notifications/views/list-notifications.client.view.html"})}]),angular.module("notifications").controller("NotificationsController",["$scope","$stateParams","$location","Authentication","Notifications","NotificationsExtra",function($scope,$stateParams,$location,Authentication,Notifications,NotificationsExtra){$scope.authentication=Authentication,$scope.detailLetterLimit=140,$scope.find=function(){$scope.notifications=Notifications.query()},$scope.nextRedirect=function(notification){NotificationsExtra.markAsRead(notification._id).then(),$location.path(notification.nextUrl)}}]),angular.module("notifications").factory("Notifications",["$resource",function($resource){return $resource("notifications/:notificationId",{notificationId:"@_id"},{update:{method:"PUT"}})}]).factory("NotificationsExtra",["$http",function($http){var NotificationsExtra={};return NotificationsExtra.markAsRead=function(notId){return $http.put("/notifications/"+notId+"/markAsRead").then(function(res){return res.data})},NotificationsExtra.countUnRead=function(){return $http.get("/notifications/unRead").then(function(res){return res.data})},NotificationsExtra}]),angular.module("posts").run(["amMoment",function(amMoment){amMoment.changeLocale("es")}]),angular.module("posts").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPosts",{url:"/posts",templateUrl:"modules/posts/views/list-posts.client.view.html"}).state("newPost",{url:"/posts/new",templateUrl:"modules/posts/views/new-post.client.view.html"}).state("showPost",{url:"/posts/:postId",templateUrl:"modules/posts/views/show-post.client.view.html"})}]),angular.module("posts").controller("PostsController",["$scope","$stateParams","$location","$http","Authentication","Posts","Comments","Likes","AWS","FileUploader","getPostsPerUser","Notifications",function($scope,$stateParams,$location,$http,Authentication,Posts,Comments,Likes,AWS,FileUploader,getPostsPerUser,Notifications){$scope.authentication=Authentication,$scope.uploader=new FileUploader({url:"https://s3.amazonaws.com/tottus/",method:"POST",queueLimit:1}),$scope.authentication.user||$location.path("/"),$scope.uploader.filters.push({name:"imageFilter",fn:function(item){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.getCredentials=function(){AWS.getCredentials().then(function(res){$scope.credentials=res.data})};var registerNotification=function(post,nextUrl){if(!~$scope.authentication.user.roles.indexOf("admin"))return!1;var newNot=new Notifications({post:post,nextUrl:nextUrl});newNot.$save(function(){console.log("success!")},function(errorResponse){console.log("error!",errorResponse)})};$scope.new=function(){var post=new Posts({detail:this.detail});if($scope.uploader.queue[0]){var uploadItem=$scope.uploader.queue[0];post.$save(function(response){uploadItem.formData=[{key:"post_"+response._id+"."+uploadItem.file.name.split(".").pop(),AWSAccessKeyId:$scope.credentials.access_key,acl:"private",policy:$scope.credentials.policy,signature:$scope.credentials.signature,"Content-Type":"application/octet-stream",filename:"post_"+response._id+"."+uploadItem.file.name.split(".").pop()}],uploadItem.onSuccess=function(){$scope.detail="",$location.path("posts/"+response._id)};var nextUrl="posts/"+response._id;registerNotification(response._id,nextUrl),uploadItem.upload(),response.imgFilePath="https://s3.amazonaws.com/tottus/post_"+post._id+"."+uploadItem.file.name.split(".").pop(),response.$update()},function(errorResponse){$scope.error=errorResponse.data.message})}else post.$save(function(response){var nextUrl="posts/"+response._id;registerNotification(response._id,nextUrl),$location.path("posts/"+response._id),$scope.detail=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.like=function(post){console.log("post",post);var like=new Likes({post:post._id});post.ngLike=!0,post.likes.push($scope.authentication.user),like.create(post._id)},$scope.find=function(){$scope.posts=Posts.query(),$scope.posts.$promise.then(function(posts){for(var i=posts.length-1;i>=0;i--){$scope.posts[i].ngLike=!1;for(var j=posts[i].likes.length-1;j>=0;j--)if(posts[i].likes[j].user===$scope.authentication.user._id){$scope.posts[i].ngLike=!0;break}}})},$scope.findOne=function(){$scope.post=Posts.get({postId:$stateParams.postId}),$scope.post.$promise.then(function(post){$scope.post.ngLike=!1;for(var i=post.likes.length-1;i>=0;i--)if(post.likes[i].user===$scope.authentication.user._id)return void($scope.post.ngLike=!0)})},$scope.canRemove=function(post){return post.$resolved?!!~$scope.authentication.user.roles.indexOf("admin")||$scope.authentication.user._id===post.user._id:void 0},$scope.remove=function(post){if(post){post.$remove();for(var i in $scope.posts)$scope.posts[i]===post&&$scope.posts.splice(i,1)}else $scope.post.$remove(function(){$location.path("posts")})},$scope.removeFromProfile=function(post){if(post){getPostsPerUser.delete(post._id);for(var i in $scope.posts)$scope.posts[i]===post&&$scope.posts.splice(i,1)}}}]),angular.module("posts").directive("confirmClick",["$window",function($window){return{link:function(scope,element,attr){var msg=attr.confirmClick||"¿Estás seguro?",clickAction=attr.confirmedClick;element.bind("click",function(){$window.confirm(msg)&&scope.$eval(clickAction)})}}}]),angular.module("posts").directive("lazySrc",["$window","$document",function($window,$document){function LazyImage(element){function isVisible(topFoldOffset,bottomFoldOffset){if(!element.is(":visible"))return!1;null===height&&(height=element.height());var top=element.offset().top,bottom=top+height;return bottomFoldOffset>=top&&top>=topFoldOffset||bottomFoldOffset>=bottom&&bottom>=topFoldOffset||topFoldOffset>=top&&bottom>=bottomFoldOffset}function render(){isRendered=!0,renderSource()}function setSource(newSource){source=newSource,isRendered&&renderSource()}function renderSource(){element[0].src=source}var source=null,isRendered=!1,height=null;return{isVisible:isVisible,render:render,setSource:setSource}}function link($scope,element,attributes){var lazyImage=new LazyImage(element);lazyLoader.addImage(lazyImage),attributes.$observe("lazySrc",function(newSource){lazyImage.setSource(newSource)}),$scope.$on("$destroy",function(){lazyLoader.removeImage(lazyImage)})}var lazyLoader=function(){function addImage(image){images.push(image),renderTimer||startRenderTimer(),isWatchingWindow||startWatchingWindow()}function removeImage(image){for(var i=0;i<images.length;i++)if(images[i]===image){images.splice(i,1);break}images.length||(clearRenderTimer(),stopWatchingWindow())}function checkDocumentHeight(){if(!renderTimer){var currentDocumentHeight=doc.height();currentDocumentHeight!==documentHeight&&(documentHeight=currentDocumentHeight,startRenderTimer())}}function checkImages(){console.log("Checking for visible images...");for(var visible=[],hidden=[],windowHeight=win.height(),scrollTop=win.scrollTop(),topFoldOffset=scrollTop,bottomFoldOffset=topFoldOffset+windowHeight,i=0;i<images.length;i++){var image=images[i];image.isVisible(topFoldOffset,bottomFoldOffset)?visible.push(image):hidden.push(image)}for(var j=0;j<visible.length;j++)visible[j].render();images=hidden,clearRenderTimer(),images.length||stopWatchingWindow()}function clearRenderTimer(){clearTimeout(renderTimer),renderTimer=null}function startRenderTimer(){renderTimer=setTimeout(checkImages,renderDelay)}function startWatchingWindow(){isWatchingWindow=!0,win.on("resize.lazySrc",windowChanged),win.on("scroll.lazySrc",windowChanged),documentTimer=setInterval(checkDocumentHeight,documentDelay)}function stopWatchingWindow(){isWatchingWindow=!1,win.off("resize.lazySrc"),win.off("scroll.lazySrc"),clearInterval(documentTimer)}function windowChanged(){renderTimer||startRenderTimer()}var images=[],renderTimer=null,renderDelay=100,win=$($window),doc=$document,documentHeight=doc.height(),documentTimer=null,documentDelay=2e3,isWatchingWindow=!1;return{addImage:addImage,removeImage:removeImage}}();return{link:link,restrict:"A"}}]),angular.module("posts").directive("ngThumb",["$window",function($window){var helper={support:!(!$window.FileReader||!$window.CanvasRenderingContext2D),isFile:function(item){return angular.isObject(item)&&item instanceof $window.File
},isImage:function(file){var type="|"+file.type.slice(file.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}};return{restrict:"A",template:"<canvas/>",link:function(scope,element,attributes){if(helper.support){var params=scope.$eval(attributes.ngThumb);if(helper.isFile(params.file)&&helper.isImage(params.file)){var canvas=element.find("canvas"),reader=new FileReader,onLoadFile=function(event){var img=new Image;img.onload=onLoadImage,img.src=event.target.result},onLoadImage=function(){var width=params.width||this.width/this.height*params.height,height=params.height||this.height/this.width*params.width;canvas.attr({width:width,height:height}),canvas[0].getContext("2d").drawImage(this,0,0,width,height)};reader.onload=onLoadFile,reader.readAsDataURL(params.file)}}}}}]),angular.module("posts").filter("imageFilter",function(){return function(input){return"assets/img/posts-placeholder.png"!==input?!0:!1}}),angular.module("posts").factory("AWS",["$http",function($http){var AWS={};return AWS.getCredentials=function(){return $http.get("/aws/s3-signature/").then(function(res){return res})},AWS}]),angular.module("posts").factory("Posts",["$resource",function($resource){return $resource("posts/:postId",{postId:"@_id"},{update:{method:"PUT"}})}]).factory("getPostsPerUser",["$http",function($http){var postsPerUser={};return postsPerUser.getPosts=function(userId){return $http.get("/users/"+userId+"/posts").then(function(res){return res.data})},postsPerUser.delete=function(postId){return $http.delete("/posts/"+postId).then(function(res){return res.data})},postsPerUser}]),angular.module("stores").config(["$stateProvider",function($stateProvider){$stateProvider.state("listStores",{url:"/stores",templateUrl:"modules/stores/views/list-stores.client.view.html"}).state("createStore",{url:"/stores/create",templateUrl:"modules/stores/views/create-store.client.view.html"}).state("viewStore",{url:"/stores/:storeId",templateUrl:"modules/stores/views/view-store.client.view.html"}).state("editStore",{url:"/stores/:storeId/edit",templateUrl:"modules/stores/views/edit-store.client.view.html"})}]),angular.module("stores").controller("StoresController",["$scope","$stateParams","$location","$http","Authentication","Stores","LocationService",function($scope,$stateParams,$location,$http,Authentication,Stores,LocationService){$scope.authentication=Authentication,$scope.create=function(){var store=new Stores({name:this.name,address:this.address,region:this.region.region,district:this.district});store.$save(function(response){$location.path("stores/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(store){if(store){store.$remove();for(var i in $scope.stores)$scope.stores[i]===store&&$scope.stores.splice(i,1)}else $scope.store.$remove(function(){$location.path("stores")})},$scope.update=function(){var store=$scope.store;store.$update(function(){$location.path("stores/"+store._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.stores=Stores.query()},$scope.findOne=function(){$scope.store=Stores.get({storeId:$stateParams.storeId})},$scope.getLocations=function(){LocationService.getLocations().then(function(res){$scope.locations=res.data,console.log("locations",$scope.locations)}),console.log("locations",$scope.locations)},$scope.updateRegion=function(){$scope.availableDistricts=$scope.region.districts}}]),angular.module("stores").factory("LocationService",["$http",function($http){var LocationService={};return LocationService.getLocations=function(){return $http.get("/locations").then(function(data){return data})},LocationService}]),angular.module("stores").factory("Stores",["$resource",function($resource){return $resource("stores/:storeId",{storeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("public-profile",{url:"/users/:userId",templateUrl:"modules/users/views/public-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("first-change-password",{url:"/settings/first-change-password",templateUrl:"modules/users/views/settings/first-change-password.client.view.html"}).state("first-update-profile",{url:"/settings/first-update-profile",templateUrl:"modules/users/views/settings/first-update-profile.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("firstsignin",{url:"/firstsignin",templateUrl:"modules/users/views/authentication/firstsignin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("edit",{url:"/settings/edit/:field",templateUrl:"modules/users/views/settings/edit_form_fields/edit.client.view.html"}).state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("listBirthdays",{url:"/birthdays",templateUrl:"modules/users/views/birthdays/list-birthdays.client.view.html"}).state("showBirthday",{url:"/birthdays/birthday",templateUrl:"modules/users/views/birthdays/show-birthday.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$scope.credentials.username=$scope.credentials.personal.DNI,$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path($scope.authentication.user.isRegistered?"/posts":"/settings/first-change-password")}).error(function(response){$scope.error=response.message})},$scope.firstsignin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path($scope.authentication.user.isRegistered?"/":"/settings/first-change-password")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("BirthdaysController",["$scope","$http","$location","$stateParams","Users","Authentication","getUsersBirthdays",function($scope,$http,$location,$stateParams,Users,Authentication,getUsersBirthdays){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.getBirthdays=function(){getUsersBirthdays.getBirthdays().then(function(usersBirthday){$scope.usersBirthday=usersBirthday,console.log(usersBirthday)})}}]),angular.module("users").controller("ModalController",["$scope","$modal","$log",function($scope,$modal){$scope.modalChangePassword=function(){$modal.open({templateUrl:"modules/users/views/modals/change-password-modal.client.view.html",backdrop:"static",controller:function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close()}}})},$scope.modalFirstProfileUpdate=function(){$modal.open({templateUrl:"modules/users/views/modals/first-profile-update-modal.client.view.html",backdrop:"static",controller:function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close()}}})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication","AWS","FileUploader","getPostsPerUser",function($scope,$http,$location,Users,Authentication,AWS,FileUploader,getPostsPerUser){$scope.user=Authentication.user,$scope.uploader=new FileUploader({url:"https://s3.amazonaws.com/tottus/",method:"POST",queueLimit:1}),$scope.user||$location.path("/"),$scope.showUserProfile=function(){$scope.showProfile={statePosts:!1,statePersonalInfo:!0,personalInfo:"active",userPosts:""},getPostsPerUser.getPosts($scope.user._id).then(function(posts){for(var i=posts.length-1;i>=0;i--){posts[i].ngLike=!1;for(var j=posts[i].likes.length-1;j>=0;j--)if(posts[i].likes[j].user===$scope.user._id){posts[i].ngLike=!0;break}}$scope.posts=posts})},$scope.switchPublicProfile=function(option){"posts"===option&&""===$scope.showProfile.userPosts&&($scope.showProfile.personalInfo="",$scope.showProfile.userPosts="active",$scope.showProfile.statePosts=!0,$scope.showProfile.statePersonalInfo=!1),"profile"===option&&""===$scope.showProfile.personalInfo&&($scope.showProfile.personalInfo="active",$scope.showProfile.userPosts="",$scope.showProfile.statePosts=!1,$scope.showProfile.statePersonalInfo=!0)},$scope.updateUserProfile=function(isValid){if(isValid){var uploadItem=$scope.uploader.queue[0],user=new Users($scope.user);$scope.success=$scope.error=null,$scope.uploader.queue[0]?user.$update(function(response){$scope.success=!0,Authentication.user=response,uploadItem.formData=[{key:"user_"+response._id+"."+uploadItem.file.name.split(".").pop(),AWSAccessKeyId:$scope.credentials.access_key,acl:"private",policy:$scope.credentials.policy,signature:$scope.credentials.signature,"Content-Type":"application/octet-stream",filename:"user_"+response._id+"."+uploadItem.file.name.split(".").pop()}],uploadItem.onSuccess=function(){$scope.detail="",$location.path("/users/"+Authentication.user._id)},uploadItem.upload(),response.assets.profilePicURL="https://s3.amazonaws.com/tottus/user_"+user._id+"."+uploadItem.file.name.split(".").pop(),response.$update()},function(response){$scope.error=response.data.message}):user.$update(function(response){$scope.success=!0,Authentication.user=response,$location.path("/users/"+Authentication.user._id)},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})},$scope.firstchangeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.passwordDetails=null,$location.path("/settings/first-update-profile")}).error(function(response){$scope.error=response.message})},$scope.uploader.filters.push({name:"imageFilter",fn:function(item){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.getCredentials=function(){AWS.getCredentials().then(function(res){$scope.credentials=res.data})},$scope.firstupdateUserProfile=function(){var bday=new Date($scope.user.personal.yearString,$scope.user.personal.monthString-1,$scope.user.personal.dayString),user=new Users($scope.user);if($scope.uploader.queue[0]){var uploadItem=$scope.uploader.queue[0];$scope.success=$scope.error=null,user.personal.dateOfBirth=bday,user.isRegistered=!0,user.$update(function(response){$scope.success=!0,Authentication.user=response,uploadItem.formData=[{key:"user_"+response._id+"."+uploadItem.file.name.split(".").pop(),AWSAccessKeyId:$scope.credentials.access_key,acl:"private",policy:$scope.credentials.policy,signature:$scope.credentials.signature,"Content-Type":"application/octet-stream",filename:"user_"+response._id+"."+uploadItem.file.name.split(".").pop()}],uploadItem.onSuccess=function(){$scope.detail="",$location.path("/posts")},uploadItem.upload(),response.assets.profilePicURL="https://s3.amazonaws.com/tottus/user_"+user._id+"."+uploadItem.file.name.split(".").pop(),console.log(response),response.$update()},function(response){$scope.error=response.data.message})}else $scope.success=$scope.error=null,user.personal.dateOfBirth=bday,user.isRegistered=!0,user.$update(function(response){$scope.success=!0,Authentication.user=response,$location.path("/posts")},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("UsersController",["$scope","$http","$location","$stateParams","Users","Authentication","Posts","getUser","getPostsPerUser",function($scope,$http,$location,$stateParams,Users,Authentication,Posts,getUser,getPostsPerUser){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.canEdit=function(){return $scope.userProfile?$scope.user._id===$scope.userProfile._id:void 0},$scope.find=function(){$scope.showProfile={statePosts:!1,statePersonalInfo:!0,personalInfo:"active",userPosts:""},getUser.getProfile($stateParams.userId).then(function(user){$scope.userProfile=user}),getPostsPerUser.getPosts($stateParams.userId).then(function(posts){for(var i=posts.length-1;i>=0;i--){posts[i].ngLike=!1;for(var j=posts[i].likes.length-1;j>=0;j--)if(posts[i].likes[j].user===$scope.user._id){posts[i].ngLike=!0;break}}$scope.posts=posts})},$scope.switchPublicProfile=function(option){"posts"===option&&""===$scope.showProfile.userPosts&&($scope.showProfile.personalInfo="",$scope.showProfile.userPosts="active",$scope.showProfile.statePosts=!0,$scope.showProfile.statePersonalInfo=!1),"profile"===option&&""===$scope.showProfile.personalInfo&&($scope.showProfile.personalInfo="active",$scope.showProfile.userPosts="",$scope.showProfile.statePosts=!1,$scope.showProfile.statePersonalInfo=!0)}}]),angular.module("users").directive("requestField",function(){return{restrict:"A",link:function(scope,element){element.on("click",function(e){e.preventDefault()})}}}),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("posts").factory("AWS",["$http",function($http){var AWS={};return AWS.getCredentials=function(){return $http.get("/aws/s3-signature/").then(function(res){return res})},AWS}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]).factory("getUser",["$http",function($http){var profile={};return profile.getProfile=function(userId){return $http.get("/users/"+userId).then(function(res){return res.data})},profile}]).factory("getUsersBirthdays",["$http",function($http){var UsersBirthdays={};return UsersBirthdays.getBirthdays=function(){return $http.get("/users/birthdays").then(function(res){return res.data})},UsersBirthdays}]),angular.module("vacancies").config(["$stateProvider",function($stateProvider){$stateProvider.state("listVacancies",{url:"/vacancies",templateUrl:"modules/vacancies/views/list-vacancies.client.view.html"}).state("newVacancy",{url:"/vacancies/new",templateUrl:"modules/vacancies/views/new-vacancy.client.view.html"}).state("showVacancy",{url:"/vacancies/vacancy",templateUrl:"modules/vacancies/views/show-vacancy.client.view.html"})}]);